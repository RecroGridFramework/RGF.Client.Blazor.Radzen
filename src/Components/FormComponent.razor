
<RgfFormComponent @ref="_rgfFormRef" EntityParameters="EntityParameters" FormComponent="this"
                  FormGroupLayoutTemplate="FormGroupLayoutTemplate"
                  FormItemLayoutTemplate="FormItemLayoutTemplate">
    <FormTemplate Context="RgfForm">
        <EditForm EditContext="RgfForm.CurrentEditContext">
            <RadzenTabs RenderMode="TabRenderMode.Client" @bind-SelectedIndex="ActiveTabIndex" Change="(arg) => PreviouslyActiveTabs.Add(arg)">
                <Tabs>
                    @foreach (var tab in RgfForm.FormData.FormTabs)
                    {
                        <RadzenTabsItem Text="@tab.Title">
                            @foreach (var group in tab.Groups)
                            {
                                if (!string.IsNullOrEmpty(group.Title))
                                {
                                    <h4 class="rz-mt-4">@group.Title</h4>
                                }
                                @RgfForm.GetFormGroupLayoutTemplate(new RgfFormGroupLayoutParameters(RgfForm, group))
                            }
                        </RadzenTabsItem>
                    }
                </Tabs>
            </RadzenTabs>
            @RgfForm.GetFormValidationTemplate()
        </EditForm>
    </FormTemplate>

    <FormItemTemplate>
        <FormItemComponent FormItemParameters="context" />
    </FormItemTemplate>

    <FormValidationTemplate>
        <div class="rz-border-danger-dark rz-mt-3">
            <div class="rz-mt-3">
                <ValidationSummary />
            </div>
        </div>
    </FormValidationTemplate>
</RgfFormComponent>

@inject IJSRuntime _jsRuntime
@code {

    [Parameter, EditorRequired]
    public RgfEntityParameters EntityParameters { get; set; } = null!;

    private IRgManager Manager => EntityParameters.Manager!;
    private RgfFormParameters FormParameters { get => EntityParameters.FormParameters; }
    protected IRecroDictService RecroDict => Manager.RecroDict;

    private RgfFormComponent _rgfFormRef { get; set; } = null!;
    public int ActiveTabIndex { get; set; } = 0;
    public HashSet<int> PreviouslyActiveTabs { get; private set; } = new() { 0 };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        FormParameters.ErrorCssClass = FormParameters.ErrorCssClass ?? "rz-messages-error";
        FormParameters.ModifiedCssClass = FormParameters.ModifiedCssClass ?? "";
    }

    public RenderFragment<RgfFormGroupLayoutParameters> FormGroupLayoutTemplate => (param) =>
    @<RadzenRow AlignItems="AlignItems.Center" Gap="3rem" class="rz-mt-2">
        @foreach (var prop in param.FormGroup.Properties)
    {
        @param.BaseFormComponent.GetFormItemLayoutTemplate(new RgfFormItemParameters(_rgfFormRef, param.FormGroup, prop))
    }
    </RadzenRow>;

    public RenderFragment<RgfFormItemParameters> FormItemLayoutTemplate => (param) =>
    @<RadzenColumn Size="@(param.Property.FlexColumnWidth ?? param.Group.FlexColumnWidth)">
        @if (!string.IsNullOrEmpty(param.Property.PreElement))
    {
        @((MarkupString)param.Property.PreElement)
    }
        @if (param.Property.EmbededGrid || param.Property.NoLabel)
    {
        <div name="@param.Property.ClientName" style="width: 100%;">
            @param.BaseFormComponent.GetFormItemTemplate(param)
        </div>
    }
    else
    {
        <RadzenFormField Text="@param.Property.Label" Variant="Variant.Text" name="@param.Property.ClientName" Style="width: 100%;">
            @param.BaseFormComponent.GetFormItemTemplate(param)
        </RadzenFormField>
    }
    </RadzenColumn>;
}
