<ul class="list-unstyled">
    @for (int idx = 0; idx < Condition.Conditions?.Count; idx++)
    {
        var item = Condition.Conditions[idx];
        <li>
            <div class="d-flex flex-row align-items-center">
                <div class="p-1">
                    <RadzenDropDown TValue="RgfFilter.LogicalOperator" TextProperty="Value" ValueProperty="Key"
                                    Data="LogicalOperators" @bind-Value=@item.LogicalOperator Disabled="idx == 0" />
                </div>
                <div class="p-1">
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="delete" Click="() => OnRemoveCondition(item)" />
                </div>
                <div class="p-1">
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="data_object" Click="() => OnAddBracket(item)" />
                </div>
                @if (item.Conditions != null)
                {
                    <div class="p-1">
                        <RadzenButton ButtonStyle="ButtonStyle.Warning" Click="() => OnRemoveBracket(item)" title="@RecroDict.GetRgfUiString("Delete")">
                            <sup>@item.ClientId</sup><span>(</span>
                        </RadzenButton>
                    </div>
                }
                else
                {
                    <div class="p-1">
                        <RadzenDropDown TValue="int" TextProperty="Value" ValueProperty="Key" Value="item.PropertyId"
                                        Data="Columns" ValueChanged="(value) => OnChangeProperty(value, item)" />
                    </div>
                    <div class="p-1">
                        <RadzenDropDown TValue="RgfFilter.QueryOperator" TextProperty="Value" ValueProperty="Key"
                                        Data="GetQueryOperators(item)" @bind-Value=@item.QueryOperator Change="(arg) => OnChangeQueryOperator((RgfFilter.QueryOperator)arg, item)" />
                    </div>
                    @if (!(new[] { RgfFilter.QueryOperator.IsNull, RgfFilter.QueryOperator.IsNotNull, RgfFilter.QueryOperator.Exists }.Contains(item.QueryOperator)))
                    {
                        var prop = FilterComponent.RgfFilterProperties.Single(e => e.Id == item.PropertyId);
                        <div class="p-1">
                            @switch (prop.ClientDataType)
                            {
                                case ClientDataType.Integer:
                                    <RadzenNumeric TValue="int?" @bind-Value="item.IntValue1" />
                                    break;

                                case ClientDataType.Decimal:
                                    <RadzenNumeric TValue="decimal?" @bind-Value="item.DecimalValue1" ShowUpDown="false" />
                                    break;

                                case ClientDataType.Double:
                                    <RadzenNumeric TValue="double?" @bind-Value="item.DoubleValue1" ShowUpDown="false" />
                                    break;

                                case ClientDataType.DateTime:
                                    <RadzenDatePicker TValue="DateTime?" @bind-Value="item.DateTimeValue1" ShowTime="prop.FormType == PropertyFormType.DateTime" />
                                    break;

                                case ClientDataType.Boolean:
                                    <RadzenCheckBox @bind-Value="item.BooleanValue1" />
                                    break;

                                default:
                                    if (prop.FormType == PropertyFormType.DropDown || prop.FormType == PropertyFormType.ListBox)
                                    {
                                        <RadzenListBox TValue="IEnumerable<string>" TextProperty="Value" ValueProperty="Key"
                                                       Data="prop.DictionaryItems" Value="item.StringArray1" ValueChanged="(value) => item.StringArray1 = value.ToArray()"
                                                       Multiple="true" AllowClear="true" AllowSelectAll="false"
                                                       Style="width: 100%; max-width: 400px; height: 150px" />
                                    }
                                    else
                                    {
                                        <RadzenTextBox @bind-Value=@item.StringValue1 />
                                    }
                                    break;
                            }
                        </div>
                        @if (new[] { RgfFilter.QueryOperator.Interval, RgfFilter.QueryOperator.IntervalE }.Contains(item.QueryOperator))
                        {
                            <span>-</span>
                            <div class="p-1">
                                @switch (prop.ClientDataType)
                                {
                                    case ClientDataType.Integer:
                                        <RadzenNumeric TValue="int?" @bind-Value="item.IntValue2" />
                                        break;

                                    case ClientDataType.Decimal:
                                        <RadzenNumeric TValue="decimal?" @bind-Value="item.DecimalValue2" ShowUpDown="false" />
                                        break;

                                    case ClientDataType.Double:
                                        <RadzenNumeric TValue="double?" @bind-Value="item.DoubleValue2" ShowUpDown="false" />
                                        break;

                                    case ClientDataType.DateTime:
                                        <RadzenDatePicker TValue="DateTime?" @bind-Value="item.DateTimeValue2" ShowTime="prop.FormType == PropertyFormType.DateTime" />
                                        break;

                                    default:
                                        <RadzenTextBox @bind-Value=@item.StringValue2 />
                                        break;
                                }
                            </div>
                        }
                        @if (new[] { RgfFilter.QueryOperator.Like, RgfFilter.QueryOperator.NotLike }.Contains(item.QueryOperator))
                        {
                            <div class="p-1">
                                <RadzenCheckBox @bind-Value="item.ToLower" />
                                <RadzenLabel Text="ToLower" />
                            </div>
                        }
                    }
                }
            </div>
        </li>
        @if (item.Conditions != null)
        {
            <li>
                <FilterConditionComponent FilterComponent="FilterComponent" Condition="item" />
            </li>
            <li>
                <div>
                    <RadzenButton ButtonStyle="ButtonStyle.Warning" Click="() => OnRemoveBracket(item)" title="@RecroDict.GetRgfUiString("Delete")">
                        <span>)</span><sup>@item.ClientId</sup>
                    </RadzenButton>
                </div>
            </li>
        }
    }
    <li>
        <div class="p-1">
            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="add" Click="() => OnAddCondition(Condition)" />
        </div>
    </li>
</ul>

@inject IRecroDictService RecroDict
@code {

    [Parameter, EditorRequired]
    public RgfFilterComponent FilterComponent { get; set; } = null!;

    [Parameter, EditorRequired]
    public RgfFilter.Condition Condition { get; set; } = null!;

    private IRgManager Manager => FilterComponent.EntityParameters.Manager!;

    private Dictionary<int, string> Columns => FilterComponent.RgfFilterProperties.ToDictionary(p => p.Id, p => p.ColTitle);
    private Dictionary<RgfFilter.LogicalOperator, string> LogicalOperators => RgfFilter.GetLogicalOperators(RecroDict);
    private Dictionary<RgfFilter.QueryOperator, string> GetQueryOperators(RgfFilter.Condition condition) => RgfFilter.GetQueryOperators(FilterComponent.RgfFilterProperties.SingleOrDefault(e => e.Id == condition.PropertyId)?.Operators, RecroDict);

    private void OnAddCondition(RgfFilter.Condition condition) => FilterComponent.AddCondition(condition);
    private void OnRemoveCondition(RgfFilter.Condition condition) => FilterComponent.RemoveCondition(condition);
    private void OnAddBracket(RgfFilter.Condition condition) => FilterComponent.AddBracket(condition);
    private void OnRemoveBracket(RgfFilter.Condition condition) => FilterComponent.RemoveBracket(condition);
    private void OnChangeQueryOperator(RgfFilter.QueryOperator value, RgfFilter.Condition condition) => FilterComponent.ChangeQueryOperator(condition, value);
    private void OnChangeProperty(int value, RgfFilter.Condition condition) => FilterComponent.ChangeProperty(condition, value);
}