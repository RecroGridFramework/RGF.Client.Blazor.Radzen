<RgfFilterComponent @ref="_rgfFilterRef" EntityParameters="EntityParameters">
    <FilterTemplate Context="RgfFilterComp">
        <FilterConditionComponent FilterComponent="RgfFilterComp" Condition="RgfFilterComp.Condition" />
    </FilterTemplate>
    <FooterTemplate Context="RgfFilterComp">
        <div class="rz-display-flex rz-flex-row rz-justify-content-flex-start rz-align-items-center">
            <div class="rz-p-1">
                <label class="col-form-label">@RecroDict.GetRgfUiString("SQLTimeout"):</label>
            </div>
            <div class="rz-p-1">
                <RadzenNumeric TValue="int?" @bind-Value="RgfFilterComp.FilterSettings.SQLTimeout" ShowUpDown="false" Min="0" Style="width:3rem" />
            </div>

            <div class="rz-p-1">
                <RadzenDropDown @bind-Value="@RgfFilterComp.FilterSettings.SettingsName" Data="RgfFilterComp.FilterHandler.PredefinedFilters.Select(e=> e.SettingsName)"
                                AllowClear="true" AllowFiltering="true" LoadData="LoadData" Change="OnTextChanged" SearchTextChanged="OnTextChanged" />
            </div>
            <div class="rz-p-1">
                <RadzenDropDown TValue="string" TextProperty="Value" ValueProperty="Key" @bind-Value="@RgfFilterComp.FilterSettings.RoleId" Data="RgfFilterComp.VisibleRoles"
                                Disabled="RgfFilterComp.FilterSettings.IsReadonly == true || !RgfFilterComp.IsPublicFilterSettingAllowed || string.IsNullOrEmpty(RgfFilterComp.FilterSettings.SettingsName)" />
            </div>
            <div class="rz-p-1">
                <RadzenButton ButtonStyle="ButtonStyle.Light" title="@RecroDict.GetRgfUiString("Save")" Icon="save"
                              Disabled="RgfFilterComp.FilterSettings.IsReadonly == true || string.IsNullOrEmpty(RgfFilterComp.FilterSettings.SettingsName) || !RgfFilterComp.IsPublicFilterSettingAllowed && RgfFilterComp.FilterSettings.RoleId != null"
                              Click="() => RgfFilterComp.OnSavePredefinedFilter()" />
            </div>
            <div class="rz-pt-1 rz-pb-1">
                <RadzenButton ButtonStyle="ButtonStyle.Light" title="@RecroDict.GetRgfUiString("Delete")" Icon="delete"
                              Disabled="RgfFilterComp.FilterSettings.IsReadonly == true || RgfFilterComp.FilterSettings.FilterSettingsId == null || !RgfFilterComp.IsPublicFilterSettingAllowed && RgfFilterComp.FilterSettings.RoleId != null"
                              Click="() => RgfFilterComp.OnDeletePredefinedFilter()" />
            </div>
        </div>
        <div class="rz-display-flex rz-flex-row rz-justify-content-space-between rz-align-items-center">
            <div class="rz-p-1">
                <RadzenSwitch @bind-Value=@RgfFilterComp.IsFilterActive />
                <RadzenLabel Text="@($"{RecroDict.GetRgfUiString("Off")}/{RecroDict.GetRgfUiString("On")}")" />
            </div>
            <div>
                <RadzenButton ButtonStyle="ButtonStyle.Light" Text="@RecroDict.GetRgfUiString("Cancel")" Click="RgfFilterComp.OnCancel" />
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="OK" Click="RgfFilterComp.OnOk" />
            </div>
        </div>
    </FooterTemplate>
</RgfFilterComponent>

<style>

    li {
        list-style: none outside none;
    }

</style>

@inject IRecroDictService RecroDict
@code {

    [Parameter, EditorRequired]
    public RgfEntityParameters EntityParameters { get; set; } = null!;

    private IRgManager Manager => EntityParameters.Manager!;
    private RgfFilterParameters FilterParameters { get => EntityParameters.FilterParameters; }

    private RgfFilterComponent _rgfFilterRef { get; set; } = default!;
    private List<string> _predefList { get; set; } = default!;

    private void LoadData(LoadDataArgs args)
    {
        _predefList = _rgfFilterRef.FilterHandler.PredefinedFilters.Select(e => e.SettingsName).ToList();
        if (!_predefList.Contains(args.Filter, StringComparer.OrdinalIgnoreCase))
        {
            _predefList.Add(args.Filter);
        }
        _ = _rgfFilterRef.RecreateAsync();
    }

    private void OnTextChanged(object arg)
    {
        string name = arg?.ToString() ?? "";
        var filter = _rgfFilterRef.FilterHandler.PredefinedFilters.FirstOrDefault(e => e.SettingsName.Equals(name));
        _rgfFilterRef.OnSetPredefinedFilter(filter?.FilterSettingsId, name);
        if (filter != null)
        {
            _ = _rgfFilterRef.RecreateAsync();
        }
    }
}